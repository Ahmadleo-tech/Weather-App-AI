# # ================================ Manual Working ================================
# import pyowm
# # For Voice pyttx3 Engine in Used
# from pyowm.utils.config import get_default_config
# import pyttsx3
# # Define the TonyAI class
# class AI:
#     def __init__(self, api_key):
#         # Initialize the OpenWeatherMap API key and configuration
#         self.api_key = api_key
#         self.config_dict = get_default_config()
#         self.config_dict['language'] = 'en'
        
#         # Create an OWM (OpenWeatherMap) object with the API key and configuration
#         self.owm = pyowm.OWM(self.api_key, self.config_dict)
#         self.mgr = self.owm.weather_manager()
        
#         # Initialize text-to-speech engine
#         self.speaker = pyttsx3.init()

#     def speak(self, text):
#         # Convert text to speech
#         self.speaker.say(text)
#         self.speaker.runAndWait()

#     def get_weather(self, city, t, future=False):
#         try:
#             # Check if future weather forecast is requested
#             if future:
#                 # Get the weather forecast for the next 3 hours
#                 forecast = self.mgr.forecast_at_place(city, '3h').forecast
#                 weather = forecast.weathers[0]
#                 forecast_info = "3-hour weather forecast:"
#                 self.speak(forecast_info)
#                 print(forecast_info)
#             else:
#                 # Get current weather
#                 observation = self.mgr.weather_at_place(city)
#                 weather = observation.weather

#             # Extract weather details
#             temperature_c = weather.temperature('celsius')['temp']
#             temperature_f = weather.temperature('fahrenheit')['temp']
#             pressure = weather.pressure['press']
#             humidity = weather.humidity
#             weather_description = weather.detailed_status
#             wind_speed = weather.wind()['speed']

#             # Display and speak weather information based on temperature type
#             weather_info = f"Weather of {city}:"
#             self.speak(weather_info)
#             print(weather_info)

#             if t == 1:
#                 temp_info = f"Temperature in Celsius: {temperature_c} 째C"
#             elif t == 2:
#                 temp_info = f"Temperature in Fahrenheit: {temperature_f} 째F"
#             else:
#                 error_msg = f"{t} is an Invalid Input"
#                 self.speak(error_msg)
#                 print(error_msg)
#                 return

#             self.speak(temp_info)
#             print(temp_info)
            
#             pressure_info = f"Pressure is {pressure} hPa"
#             humidity_info = f"Humidity is {humidity} %"
#             weather_desc_info = f"Weather Description: {weather_description}"
#             wind_speed_info = f"Wind Speed is {wind_speed} m/s"

#             self.speak(pressure_info)
#             self.speak(humidity_info)
#             self.speak(weather_desc_info)
#             self.speak(wind_speed_info)

#             print(pressure_info)
#             print(humidity_info)
#             print(weather_desc_info)
#             print(wind_speed_info)

#         except Exception as e:
#             # Handle and report any errors
#             error_msg = f"An error occurred: {e}"
#             self.speak(error_msg)
#             print(error_msg)

# # Main program execution
# if __name__ == "__main__":
#     # API key for OpenWeather API
#     api_key = "7271cae763955ac86c0b3dbdcd7f7f55"
    
#     # Create an instance of TonyAI
#     tony_ai = AI(api_key)
    
#     # Get user input for city name, temperature type, and future forecast
#     city = input("Enter city name: ")
#     t = int(input("Enter Type of Temperature (1: 째C, 2: 째F): "))
#     future = input("Do you want the future weather forecast? (yes/no): ").strip().lower() == 'yes'
    
#     # Fetch and display weather information
#     tony_ai.get_weather(city, t, future)

